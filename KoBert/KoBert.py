# -*- coding: utf-8 -*-
"""KoBERT_모델 실행 및 프린트할 텍스트 생성.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w0nZjcbE6lzNoIR4RkM-hL4PKnOTHUS9
"""

# 필요 라이브러리 import
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
import gluonnlp as nlp
import numpy as np
from tqdm import tqdm, tqdm_notebook
import pandas as pd

# kobert
from kobert.utils import get_tokenizer
from kobert.pytorch_kobert import get_pytorch_kobert_model

# transformers
from pytorch_transformers import BertTokenizer, BertForSequenceClassification, BertConfig
from transformers import AdamW
from transformers.optimization import get_cosine_schedule_with_warmup

# 랜덤으로 문장 변환
import random

# 모델에 활용할 BERTClassifier 선언
class BERTClassifier(nn.Module):
    def __init__(self,
                 bert,
                 hidden_size = 768,
                 num_classes=6,   ## 클래스 수 조정 - 6가지로 조정 ##
                 dr_rate=None,
                 params=None):
        super(BERTClassifier, self).__init__()
        self.bert = bert
        self.dr_rate = dr_rate
                 
        self.classifier = nn.Linear(hidden_size , num_classes)
        if dr_rate:
            self.dropout = nn.Dropout(p=dr_rate)
    
    def gen_attention_mask(self, token_ids, valid_length):
        attention_mask = torch.zeros_like(token_ids)
        for i, v in enumerate(valid_length):
            attention_mask[i][:v] = 1
        return attention_mask.float()

    def forward(self, token_ids, valid_length, segment_ids):
        attention_mask = self.gen_attention_mask(token_ids, valid_length)
        
        _, pooler = self.bert(input_ids = token_ids, token_type_ids = segment_ids.long(), attention_mask = attention_mask.float().to(token_ids.device))
        if self.dr_rate:
            out = self.dropout(pooler)
        return self.classifier(out)

# KoBERT 입력 데이터로 변환

class BERTDataset(Dataset):
    def __init__(self, dataset, sent_idx, label_idx, bert_tokenizer, max_len,
                 pad, pair):
        transform = nlp.data.BERTSentenceTransform(
            bert_tokenizer, max_seq_length=max_len, pad=pad, pair=pair)

        self.sentences = [transform([i[sent_idx]]) for i in dataset]
        self.labels = [np.int32(float(i[label_idx])) for i in dataset]

    def __getitem__(self, i):
        return (self.sentences[i] + (self.labels[i], ))

    def __len__(self):
        return (len(self.labels))


class KoBert:

    # 텍스트 감성 예측
    def predict(self, model, predict_sentence):

        data = [predict_sentence, '0']
        dataset_another = [data]

        another_test = BERTDataset(dataset_another, 0, 1, self.tok, 512, True, False)
        test_dataloader = torch.utils.data.DataLoader(another_test, batch_size=512, num_workers=2)
        
        model.eval()

        for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(test_dataloader):
            token_ids = token_ids.long().to(self.device)
            segment_ids = segment_ids.long().to(self.device)

            valid_length= valid_length
            label = label.long().to(self.device)

            out = model(token_ids, valid_length, segment_ids)


            test_eval=[]
            for i in out:
                logits=i
                logits = logits.detach().cpu().numpy()
                test_eval.append(np.argmax(logits))
                
            return test_eval[0]

    def __init__(self):
        #GPU 사용
        self.device = torch.device("cuda:0")
        x = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.int32, device=self.device)

        #optimizer와 schedule 설정
        no_decay = ['bias', 'LayerNorm.weight']
        self.model = torch.load('/content/drive/MyDrive/텐활기1팀/project/dataset/KoBERT_training_model.pt')  # 전체 모델을 통째로 불러옴, 클래스 선언 필수

        optimizer_grouped_parameters = [
            {'params': [p for n, p in self.model.named_parameters() if not any(nd in n for nd in no_decay)], 'weight_decay': 0.01},
            {'params': [p for n, p in self.model.named_parameters() if any(nd in n for nd in no_decay)], 'weight_decay': 0.0}
        ]

        optimizer = AdamW(optimizer_grouped_parameters, lr=5e-5)

        self.model.load_state_dict(torch.load('/content/drive/MyDrive/텐활기1팀/project/dataset/model_state_dict.pt'))  # state_dict를 불러 온 후, 모델에 저장

        checkpoint = torch.load('/content/drive/MyDrive/텐활기1팀/project/dataset/all.tar')   # dict 불러오기
        self.model.load_state_dict(checkpoint['model'])
        optimizer.load_state_dict(checkpoint['optimizer'])



        #BERT 모델, Vocabulary 불러오기
        bertmodel, vocab = get_pytorch_kobert_model()

        #토큰화
        #torch load 하는 방향으로 load
        tokenizer = get_tokenizer()
        self.tok = nlp.data.BERTSPTokenizer(tokenizer, vocab, lower=False)
        theraphy_sentence = pd.read_excel('/content/drive/MyDrive/텐활기1팀/project/dataset/문장생성규칙.xlsx')

        # 감정 및 영어 문장 담는 리스트
        self.sentence_list = []
        for sentence, emotion  in zip(theraphy_sentence['영문'], theraphy_sentence['감정 num'].map(int)) :
            dataset = []
            dataset.append(str(sentence))
            dataset.append(emotion)
            self.sentence_list.append(dataset)



    def sentimental(self, sentence):
        L = []
        pred = self.predict(self.model, sentence)
        for i in range(0,len(self.sentence_list)) :
            if  pred== self.sentence_list[i][1] :
                print('sentence_list :',L)
                # L.append(self.sentence_list[i][0])
                L.append("{:02d}".format(self.sentence_list[i][1]) + '|' + self.sentence_list[i][0])
        res = random.sample(L,1)[0]
        return res
        # # 예측된 감정에 따른 문장 변환
        # def therapy_sentence(sentence) :
        #     L = []
        #     for i in range(0,len(self.sentence_list)) :
        #         pred = self.predict(self.model, sentence)
        #         if  pred== self.sentence_list[i][1] :
        #             print('sentence_list :',L)
        #             # L.append(self.sentence_list[i][0])
        #             L.append("{:02d}".format(self.sentence_list[i][1]) + '|' + self.sentence_list[i][0])
        #     res = random.sample(L,1)[0]
        #     # print("res", res)
        #     return res

        # # 문장 추출
        # text = therapy_sentence(sentence)
        # print(text)
        # return text



# def main(text):
#     KoBert.sentimental(text)
def main():
    kb = KoBert()
    kb.sentimental("")


if __name__ == "__main__":
	main()
